#!/usr/bin/bash

# To do: Could use command-line args over env vars? 
#        Probably some overlap with get_cylc_times functions
#        Do we need set -e? 

# Check required env vars are set correctly
# Globals used: 
#   SUITE_STATUS, ARCHIVE_DIR, REPORT_DIR, REPORT_FILE 
check_env_vars() { 
  if [[ ! -d $ARCHIVE_DIR ]]; then 
    echo "Error: Archive dir $ARCHIVE_DIR does not exist"
    exit 99
  fi
  if [[ ! -d $REPORT_DIR ]]; then 
    echo "Error: Report dir $REPORT_DIR does not exist"
    exit 99
  fi
  if [[ ! -f $SUITE_STATUS ]]; then 
    echo "Error: Suite status file $SUITE_STATUS does not exist"
    exit 99
  fi

  echo "Archive dir: $ARCHIVE_DIR"
  echo "Report dir: $REPORT_DIR"
  echo "Report file: $REPORT_FILE"
  echo "Suite status: $SUITE_STATUS"
} 

# Reset variables used in suite checking 
reset_suite_vars() { 
  ACTUAL_CYCLES=""
  NUM_CYCLES=""
  LAST_COMPLETED_CYCLE=""
  REF_CYCLES=""
  MISSING_CYCLES=""
  NUM_MISSING_CYCLES=""
}

# Get cycles in suite log directory
# Globals used:
#   ARCHIVE_DIR, SUITE
# Return: 
#   List of unique, sorted, cycle directories. 
get_actual_cycles() { 
  local dirs=""
    
  if [[ -d $ARCHIVE_DIR/$SUITE ]]; then
     cd $ARCHIVE_DIR/$SUITE
			
     # Look in all log directories 
     for log in log*; do
       if [[ -d $log/job ]]; then 
	 cd $log/job
	 dirs+=$(\ls)" "
	 cd ../../
       fi
     done
		
     # Directories with cycle date format
     local cycle_dirs=$(echo $dirs | grep -Eo "[0-9]{8}T[0-9]{4}Z")    
     # Remove duplicates and sort for comparison
     echo $cycle_dirs | tr ' ' '\n' | sort -u
  fi
}

# *** This method is too slow when we have 100s of cycles***
# Get cycles that should appear between first and last, given 
# cycle length. 
# Note: this uses rose date
# Globals used: 
#   START_CYCLE, LAST_COMPLETED_CYCLE, CYCLE_LEN
# Returns: 
#   List of cycles
get_ref_cycles_rose() { 
  export ROSE_CYCLING_MODE=360day
  
  # Work out how many cycles that should have completed
  local completed_days=$(rose date $START_CYCLE $LAST_COMPLETED_CYCLE --print-format=d)
  local completed_cycles=$((completed_days / CYCLE_LEN))
  
  # Work out what the cycles should be 
  for ((i=0; i<=completed_cycles; i++)); do 
    local offset=$((CYCLE_LEN*i))
    rose date $START_CYCLE --offset=${offset}D
  done 
} 

# Get cycles that should appear between first and last, given 
# cycle length. Two cases will work: 90d and 30d cycles. 
# Globals used: 
#   START_CYCLE, LAST_COMPLETED_CYCLE, CYCLE_LEN
# Returns: 
#   List of cycles
#   Error code 1 if cycle length  not supported
get_ref_cycles() { 
  local start_year=$(echo $START_CYCLE | cut -c1-4)
  local end_year=$(echo $LAST_COMPLETED_CYCLE | cut -c1-4)
  local years=$(seq $start_year $end_year)
  if [[ "$CYCLE_LEN" -eq 90 ]]; then 
    local months="01 04 07 10"
  elif [[ "$CYCLE_LEN" -eq 30 ]]; then 
    local months="01 02 03 04 05 06 07 08 09 10 11 12"
  else 
    return
  fi 
  
  for year in $years; do 
    for month in $months; do 
      local cycle=$year$month'01T0000Z'
      if [[ "$cycle" == "$LAST_COMPLETED_CYCLE" ]]; then
        break 2
      else
	echo $cycle
      fi 
    done
  done
} 

# Return number of elements in a list. 
count_values() { 
  echo $#
} 

# Get the last element in a list 
get_last_value() { 
  echo "$@" | awk '{print $NF}'
} 

# Compare list of actual cycles to refernce cycles 
# Globals used: 
#   ACTUAL_CYCLES, REF_CYCLES 
# Returns: 
#   Values that appear in REF_CYCLES but not ACTUAL_CYCLES
get_missing_cycles() { 
  comm -23 <(echo "$REF_CYCLES") <(echo "$ACTUAL_CYCLES")
} 

# Write the missing cycles to a file. 
# Globals used:
#   NUM_MISSING_CYCLE, MISSING_CYCLES, REPORT_DIR, SUITE
# Globals modified: 
#   ERR_COUNT
# Files modified: 
#   $REPORT_DIR/$suite"_missing.txt"
write_missing_cycles() {
  if [[ "$NUM_MISSING_CYCLES" -gt 0 ]]; then
    ((ERR_COUNT+=1))
    echo "$MISSING_CYCLES" > $REPORT_DIR/$SUITE"_missing.txt"
  fi
} 

# Loop through suites in $SUITE_STATUS file. 
# Globals used: 
#   SUITE_STATUS, ARCHIVE_DIR, REPORT_DIR, REPORT_FILE 
# Files modified: 
#   $REPORT_DIR/$REPORT_FILE
check_suite_logs() { 
  ERR_COUNT=0
  
  # Loop through suite status file entries
  while IFS="," read -r SUITE STATUS CYCLE_LEN RUN_LEN START_CYCLE FINAL_CYCLE; do

    #if [[ "$SUITE" == "u-db481" ]]; then 
  
    echo "Processing $SUITE"
    reset_suite_vars
   
    ACTUAL_CYCLES=$(get_actual_cycles) 
    NUM_CYCLES=$(count_values $ACTUAL_CYCLES)	
    LAST_COMPLETED_CYCLE=$(get_last_value $ACTUAL_CYCLES)
    REF_CYCLES=$(get_ref_cycles)
    if [[ $? -eq 0 ]]; then 
      #echo $REF_CYCLES
      MISSING_CYCLES=$(get_missing_cycles)
      NUM_MISSING_CYCLES=$(count_values $MISSING_CYCLES)
    else
      NUM_MISSING_CYCLES="X"
    fi
           
    write_missing_cycles 
    write_suite_report
    
    #fi
  done < <(cut -d ',' -f1,5,8-11 $SUITE_STATUS | tail -n +2)
} 

# Writes report file header
# Globals used:
#   REPORT_DIR, REPORT_FILE, ERR_COUNT
# Files modified: 
#   $REPORT_DIR/$REPORT_FILE
write_header() { 
  local header="Suite id,Status,Final cycle,Last completed cycle,"
  header+="Run length (cycles),Num cycle dirs,Missing cycles"
  echo $header > $REPORT_DIR/$REPORT_FILE
} 

# Write report line for current SUITE
write_suite_report() { 
  local suite_report=$(echo $SUITE,$STATUS,$FINAL_CYCLE,$LAST_COMPLETED_CYCLE,)
  suite_report+=$(echo $RUN_LEN,$NUM_CYCLES,$NUM_MISSING_CYCLES) 
  echo $suite_report >> $REPORT_DIR/$REPORT_FILE
} 

# Write number of suites with errors
report_status() { 
  echo "Info: Missing cycles in $ERR_COUNT suites." >&2
  exit $ERR_COUNT
} 

# For each suite in status file ($SUITE_STATUS), report number of cycles 
# archived in $ARCHIVE_DIR and whether there any gaps. 
# Just checks for cycle directories. Doesn't check task entries. 
# Globals read: 
#   SUITE_STATUS, ARCHIVE_DIR, REPORT_DIR, REPORT_FILE
# Outputs: 
#   Writes a report file $REPORT_DIR/$REPORT_FILE
#   If a suite has missing cycles, writes them to a file in $REPORT_DIR
# Returns:
#   Error code equal to number of suites with missing cycles.
main() {
  check_env_vars
  write_header
  check_suite_logs
  report_status 
} 

main "$@"


